---
title: "STATS 506 HW1"
author: "Minxuan Chen"
date: last-modified
format:
  pdf:
    toc: true
    number-sections: true
    colorlinks: true
  html:
    toc: true
    css: styles.css
    fig-align: "center"
    fig-width: 8
    fig-height: 6
    embed-resources: true
    format-links: false
    execute:
      warning: true
      freeze: auto
code-fold: show
code-overflow: scroll
code-line-numbers: true
editor_options: 
  chunk_output_type: inline
---

## Problem 1 Wine data
### a
```{r p1a}
wine.data <- read.table("./wine.data", sep=",", header=FALSE,
                        col.name=c(
        "class", "Alcohol", "Malic acid", "Ash",
	      "Alcalinity_of_ash", "Magnesium", "Total_phenols",
 	      "Flavanoids", "Nonflavanoid_phenols", "Proanthocyanins",
	      "Color_intensity","Hue", "OD280_OD315_of_diluted_wines",
 	      "Proline" ))
head(wine.data)
```

### b
`wine.names` reports that  

> 9. Class Distribution: number of instances per class  
  class 1 59  
  class 2 71  
  class 3 48  

In our dataframe
```{r p1b}
wine.data$class <- as.factor(wine.data$class)
summary(wine.data$class)
```

### c
```{r p1c}
# 1
wine.data[which.max(wine.data$Alcohol) ,1]
# 2
wine.data[which.min(wine.data$Alcohol) ,1]
# 3
sum((wine.data$Magnesium>114))
# 4
tapply((wine.data$Magnesium>114), wine.data$class, FUN=sum)
```

### d
```{r p14}
all.tab <- c(class=NA, colMeans(wine.data[, -1]))
class.tab <- aggregate(.~class, wine.data, mean)
out.tab <- rbind(all.tab, class.tab)
rownames(out.tab) <- c("overall", "class 1", "class 2", "class 3")
out.tab[, -1]
```

### e
We'd like to treat this as a multiple comparisons problem. Use Bonferroni correction
```{r p1e}
pairwise.t.test(wine.data$Ash, wine.data$class, p.adjust.method="bonferroni")
```
Based on the output, with an overall $\alpha$ level of 0.05, the level of Ash is not all equal across the three classes. Furthermore, we can observe significant differences between class 1 and 2, as well as between class 2 and 3. However, there is no significant difference between class 1 and 3.

Implement manually:
```{R p1ee}
var.tab <- aggregate(Ash~class, wine.data, FUN=var)
idx <- list(c(1, 2), c(1, 3), c(2, 3))
cls.nb <- c(59, 71, 48)
sd.pool <- sqrt(sum((cls.nb-1)*var.tab$Ash)/(sum(cls.nb)-3))
p.values <- seq(3)
for (i in seq(3)){
  i1 <- idx[[i]][1]
  i2 <- idx[[i]][2]
  p.values[i] <- 2*(1-pt(abs(out.tab[i1+1, 4]-out.tab[i2+1, 4])/
                    (sqrt(1/cls.nb[i1]+1/cls.nb[i2])*sd.pool), 
                df=sum(cls.nb)-3))
}
p.values
```
Please note that these p-values are unadjusted, and multiplying them by 3 will yield the Bonferroni-corrected result (R output). Thus, we obtain the same and correct result through manual calculation.

## Problem 2 Perfect Powers
### a
```{r p2a}
isPerfectPower <- function(number, p){
    maxroot <- ceiling(number^(1/p))
    roots <- abs(seq(0,maxroot)^p-number) < sqrt(.Machine$double.eps)
    id <- which.max(roots)
    if (sum(roots)==0)
        return(list(isPerfect=FALSE, root=number^(1/p)))
    return(list(isPerfect=TRUE, root=id-1))
    
}
isPerfectPower(27, p=2)
```
### b
```{r p2b}
findRootPower <- function(number){
  maxpower <- ceiling(log2(number))
  for (i in 2:maxpower){
    res <- isPerfectPower(number, p=i)
    if (res$isPerfect)
      return (paste(number," = ", res$root, "^", i))
  }
  return ("Not a perfect power")
}
for (i in c(27, 13060694016, 7776, 170859375, 58247422, 94143178827)){
  print(i)
  print(findRootPower(i))
}
```

## Problem 3 ChatGPT
### a
GPT-3.5 output:

> Here are two R functions for your requirements. The first function, `identify_poker_hand`, takes a vector of suits and a vector of ranks representing a 5-card hand and returns the name of the hand. The second function, `deal_poker_round`, simulates dealing a round of cards in a game of poker (5 card stud) for a specified number of players, displays all the hands, and uses the first function to display the name of each hand.

```{r p3a}
#| code-fold: true
# Function to identify the poker hand
identify_poker_hand <- function(suits, ranks) {
  # Ensure that suits and ranks are sorted
  suits <- sort(suits)
  ranks <- sort(ranks)
  
  # Function to check if the hand is a flush
  is_flush <- function(suits) {
    all(suits == suits[1])
  }
  
  # Function to check if the hand is a straight
  is_straight <- function(ranks) {
    all(diff(ranks) == 1)
  }
  
  # Check for specific poker hands
  if (is_flush(suits) && is_straight(ranks)) {
    if (max(ranks) == 14) {
      return("Royal Flush")
    } else {
      return("Straight Flush")
    }
  } else if (any(table(ranks) == 4)) {
    return("Four of a Kind")
  } else if (all(table(ranks) == c(2, 3))) {
    return("Full House")
  } else if (is_flush(suits)) {
    return("Flush")
  } else if (is_straight(ranks)) {
    return("Straight")
  } else if (any(table(ranks) == 3)) {
    return("Three of a Kind")
  } else if (sum(table(ranks) == 2) == 4) {
    return("Two Pair")
  } else if (sum(table(ranks) == 2) == 2) {
    return("One Pair")
  } else {
    return("High Card")
  }
}

# Function to simulate dealing a round of poker
deal_poker_round <- function(num_players) {
  # Define the suits and ranks
  suits <- c("Hearts", "Diamonds", "Clubs", "Spades")
  ranks <- c(2:10, "Jack", "Queen", "King", "Ace")
  
  # Create a deck of cards
  deck <- expand.grid(Rank = ranks, Suit = suits)
  
  # Shuffle the deck
  deck <- deck[sample(nrow(deck)), ]
  
  # Deal cards to players
  hands <- list()
  for (i in 1:num_players) {
    start <- (i - 1) * 5 + 1
    end <- i * 5
    player_hand <- deck[start:end, ]
    hands[[paste("Player", i)]] <- player_hand
    cat("Player", i, "Hand:", "\n")
    print(player_hand)
    cat("Hand Name:", identify_poker_hand(player_hand$Suit, player_hand$Rank), "\n")
    cat("\n")
  }
  
  return(hands)
}

```

> You can adjust the `num_players` variable to specify the number of players in the game. This code defines the poker hands and simulates dealing cards for each player, displaying their hands and identifying the name of each hand using the `identify_poker_hand` function.

### b
We need to check the validity of two functions `identity_poker_hand()` and `deal_poker_round()`. We directly run the example given by GPT.
```{r p3b}
# These three lines are also generated by GPT
# Example usage:
set.seed(123)  # Set a random seed for reproducibility
num_players <- 4
hands_dealt <- deal_poker_round(num_players)

```

From the result, the code works, but throws **Warnings** when trying to return the hand name.

### c {#sec-code}
Commented codes.        
Note that certain comments are automatically generated by GPT and are enclosed in parentheses. If no further comments are appended below these parentheses, it means that we agree with GPT.
```r
# (Function to identify the poker hand)
identify_poker_hand <- function(suits, ranks) {
  # (Ensure that suits and ranks are sorted)
  suits <- sort(suits)
  ranks <- sort(ranks)
  
  # (Function to check if the hand is a flush)
  is_flush <- function(suits) {
    # suits == suits[1] returns a logical vector representing whether each
    # suit is the same as the first one. 
    # all() can test if all of the values given are true. 
    # So the return represent whether all the same suit, i.e. a flush
    all(suits == suits[1])
  }
  
  # (Function to check if the hand is a straight)
  is_straight <- function(ranks) {
    # From help(diff), "If x is a vector of length n and differences = 1,
    # then the computed result is equal to the successive differences
    # x[(1+lag):n] - x[1:(n-lag)]." Here lag=1(default). 
    # This code test whether all diffs are 1, i.e. a straight
    all(diff(ranks) == 1)
  }
  
  # (Check for specific poker hands)
  if (is_flush(suits) && is_straight(ranks)) {
    # test whether contains ace (14)
    if (max(ranks) == 14) {
      return("Royal Flush")
    } else {
      return("Straight Flush")
    }
    # table() returns a contingency table of the counts at each levels 
    # in rank. any() check whether at least one value is true.
    # So 4 means four cards of the same suit
  } else if (any(table(ranks) == 4)) {
    return("Four of a Kind")
    # full house will yield a table (2, 3) or (3, 2), depending on the order of ranks
    # The method may be conceptually correct, but not the implementation
  } else if (all(table(ranks) == c(2, 3))) {
    return("Full House")
    # trivial
  } else if (is_flush(suits)) {
    return("Flush")
    # trivial
  } else if (is_straight(ranks)) {
    return("Straight")
    # similar to "Four of a kind"
  } else if (any(table(ranks) == 3)) {
    return("Three of a Kind")
    # table(ranks) == 2 yield a permutation of (TRUE, TRUE, FALSE)
    # the method may be correct but the implementation requires adjustment.
  } else if (sum(table(ranks) == 2) == 4) {
    return("Two Pair")
    # table(ranks) == 2 yield a permutation of (TRUE, FALSE, FALSE, FALSE)
    # the method may be correct but the implementation requires adjustment.
  } else if (sum(table(ranks) == 2) == 2) {
    return("One Pair")
  } else {
    # trivial
    return("High Card")
  }
}

# (Function to simulate dealing a round of pokerï¼‰
deal_poker_round <- function(num_players) {
  # (Define the suits and ranks)
  suits <- c("Hearts", "Diamonds", "Clubs", "Spades")
  ranks <- c(2:10, "Jack", "Queen", "King", "Ace")
  
  # (Create a deck of cards)
  # expand.grid() returns the Cartesian product of ranks and suits, 
  # which is the full representation of cards
  deck <- expand.grid(Rank = ranks, Suit = suits)
  
  # (Shuffle the deck)
  deck <- deck[sample(nrow(deck)), ]
  
  # (Deal cards to players)
  hands <- list()
  for (i in 1:num_players) {
    # index is : 1st (1 2 3 4 5), 2nd (6,7,8,9,10)
    # so we use the following two formulas
    start <- (i - 1) * 5 + 1
    end <- i * 5
    # draw five cards from the deck
    player_hand <- deck[start:end, ]
    hands[[paste("Player", i)]] <- player_hand
    cat("Player", i, "Hand:", "\n")
    print(player_hand)
    # print hand name
    cat("Hand Name:", identify_poker_hand(player_hand$Suit, player_hand$Rank), "\n")
    cat("\n")
  }
  
  return(hands)
}

```

### d
* Are the inputs and outputs as described above?

  Yes. As shown in the previous output.

* Are the hands valid (e.g. real cards, no duplicates, right number)?

  Yes. From
  
  ```r
  suits <- c("Hearts", "Diamonds", "Clubs", "Spades")
  ranks <- c(2:10, "Jack", "Queen", "King", "Ace")
  deck <- expand.grid(Rank = ranks, Suit = suits)
    
  # (Shuffle the deck)
  deck <- deck[sample(nrow(deck)), ]
  ```

* Are the names of the hands correct?  

  No.
  ```{r p3ddd}
  #| warning: false
  #full house
  ranks <- c(2,2,2,3,3)
  suits <- c("Hearts", "Diamonds", "Clubs", "Spades", "Clubs")
  cat("Should be full house but: ", identify_poker_hand(suits, ranks))
  
  #two pair
  ranks <- c(2,2,3,3,4)
  suits <- c("Hearts", "Diamonds", "Clubs", "Spades", "Clubs")
  cat("Should be two pair but: ", identify_poker_hand(suits, ranks))
  
  #one pair
  ranks <- c(2,2,3,6,4)
  suits <- c("Hearts", "Diamonds", "Clubs", "Spades", "Clubs")
  cat("Should be one pair but: ", identify_poker_hand(suits, ranks))
  ```

* Does it ensure no duplicates in cards across hands? What happens if you ask for more than 10 hands to be dealt (as there are only 52 cards in a standard deck)?
  
  `expand.grid()` can generate non-duplicate 52 cards, and the default value of `replace` in `sample()` is `FALSE`, ensuring no duplicates in cards across hands.
  
  Asking more than 10 hands will result in `NA` value in Player 11's hands.
  ```{r p3dddd}
  #| warning: false
  capture.output(out <- deal_poker_round(11), file=nullfile())
  out[["Player 11"]]
  ```
  
### e: Remedy
We use the code in part c ([-@sec-code]) to analyse the errors.

1. Line 4, 5, 68, 69 and 92. Sorting `ranks` which contains numbers and strings is problematic. Additionally, sorting `ranks` and `suits` separately can disrupt the `rank-suit` pairing.

   We can use a named vector `2:14` to define the ranks. The sort of suits is unnecessary since we don't perform hand comparisons.
   ```r
   suits <- c("Hearts", "Diamonds", "Clubs", "Spades")
   ranks <- 2:14
   names(ranks) <- c(2:10, "Jack", "Queen", "King", "Ace")
    
   ranks.st <- sort(ranks, index.return=TRUE)
   ranks <- ranks.st$x
   suits <- suits[ranks.st$ix]
   ```

2. Line 40, full house. Full house will yield a table (2, 3) or (3, 2), depending on the order of ranks.
   ```r
   else if (identical(as.numeric((sort(table(ranks))), c(2, 3))) 
   ```

3. Line 53, two pair. Similar to full house.
   ```r
   else if (sum(table(ranks) == 2) == 2)
   ```

4. Line 57, one pair.
   ```r
   else if (sum(table(ranks) == 2) == 1)
   ```
   
5. Line 66. We need to limit the number of players.
   ```r
   deal_poker_round <- function(num_players) {
   if(num_players>10)
      return (paste("Number of players is", num_players, "Too many!"))
   ```
6. Line 17, 26-31. Note that "A,2,3,4,5" is also a straight.
   ```r
   is_straight <- function(ranks) {
     return (all(diff(ranks) == 1) || identical(ranks, c(2,3,4,5,14)))
   }
  
   if (is_flush(suits) && is_straight(ranks)) {
     # test whether contains ace (14)
     if (min(ranks) == 10) {
      return("Royal Flush")
     } else {
      return("Straight Flush")
     }
   ```
Revised :
```{r p3e}
# (Function to identify the poker hand)
identify_poker_hand <- function(suits, ranks) {
  # (Ensure that suits and ranks are sorted)
   ranks.st <- sort(ranks, index.return=TRUE)
   ranks <- ranks.st$x
   suits <- suits[ranks.st$ix]
   
  # (Function to check if the hand is a flush)
  is_flush <- function(suits) {
    #suits == suits[1] returns a logical vector representing whether each
    #suit is the same as the first one. 
    #all() can test if all of the values given are true. 
    #So the return represent whether all the same suit, i.e. a flush
    all(suits == suits[1])
  }
  
  # (Function to check if the hand is a straight)
  is_straight <- function(ranks) {
    #From help(diff), "If x is a vector of length n and differences = 1,
    #then the computed result is equal to the successive differences
    #x[(1+lag):n] - x[1:(n-lag)]." Here lag=1(default). 
    #This code test whether all diffs are 1, i.e. a straight
    return (all(diff(ranks) == 1) || identical(ranks, c(2,3,4,5,14)))
  }
  
  # Check for specific poker hands
  if (is_flush(suits) && is_straight(ranks)) {
    # test whether contains ace (14)
    if (min(ranks) == 10) {
      return("Royal Flush")
    } else {
      return("Straight Flush")
    }
    # table() returns a contingency table of the counts at each levels 
    # in rank. any() checks whether at least one value is true.
    # So 4 means four cards of the same suit
  } else if (any(table(ranks) == 4)) {
    return("Four of a Kind")
    # full house will yield a table (2, 3) or (3, 2), depending on the order of ranks
    # The method may be conceptually correct, but the implementation requires adjustment.
  } else if (identical(as.numeric(sort(table(ranks))), c(2, 3))) {
    return("Full House")
    # trivial
  } else if (is_flush(suits)) {
    return("Flush")
    # trivial
  } else if (is_straight(ranks)) {
    return("Straight")
    # similar to "Four of a kind"
  } else if (any(table(ranks) == 3)) {
    return("Three of a Kind")
    # table(ranks) == 2 yield a permutation of (TRUE, TRUE, FALSE)
  } else if (sum(table(ranks) == 2) == 2) {
    return("Two Pair")
    # table(ranks) == 2 yield a permutation of (TRUE, FALSE, FALSE, FALSE)
  } else if (sum(table(ranks) == 2) == 1) {
    return("One Pair")
  } else {
    #trivial
    return("High Card")
  }
}

# (Function to simulate dealing a round of pokerï¼‰
deal_poker_round <- function(num_players) {
  
  if(num_players>10)
      return (paste("Number of players is", num_players, "Too many!"))
  
  # (Define the suits and ranks)
  suits <- c("Hearts", "Diamonds", "Clubs", "Spades")
  ranks <- 2:14
  names(ranks) <- c(2:10, "Jack", "Queen", "King", "Ace")
  
  # (Create a deck of cards)
  # expand.grid() returns the Cartesian product of ranks and suits, 
  # which is the full representation of cards
  deck <- expand.grid(Rank = ranks, Suit = suits)
  
  # (Shuffle the deck)
  deck <- deck[sample(nrow(deck)), ]
  row.names(deck) <- NULL
  
  # (Deal cards to players)
  hands <- list()
  for (i in 1:num_players) {
    # index is : 1st (1 2 3 4 5), 2nd (6,7,8,9,10)
    # so we use the following two formulas
    start <- (i - 1) * 5 + 1
    end <- i * 5
    # draw five cards from the deck
    player_hand <- deck[start:end, ]
    
    hands[[paste("Player", i)]] <- player_hand
    cat("Player", i, "Hand:", "\n")
    
    print(data.frame(Rank=names(ranks[player_hand$Rank-1]),
                     Suit=player_hand$Suit))
    
    # print hand name
    cat("Hand Name:", 
        identify_poker_hand(player_hand$Suit, player_hand$Rank), "\n")
    cat("\n")
  }
  
  return(hands)
}
```

Test: We employ different seeds to simulate hands dealt to a player.
```{r test}
#Royal Flush
set.seed(436847)
tp <- deal_poker_round(1)

#Straight Flush
set.seed(145340)
tp <- deal_poker_round(1)

#Four of a Kind
set.seed(146431)
tp <- deal_poker_round(1)

#Full House
set.seed(37784)
tp <- deal_poker_round(1)

#Flush
set.seed(146907)
tp <- deal_poker_round(1)

#Straight
set.seed(147099)
tp <- deal_poker_round(1)

#Three of a Kind
set.seed(147217)
tp <- deal_poker_round(1)

#Two Pair
set.seed(147251)
tp <- deal_poker_round(1)

#One Pair
set.seed(147250)
tp <- deal_poker_round(1)

#High Card
set.seed(147230)
tp <- deal_poker_round(1)
```
