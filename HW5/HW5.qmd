---
title: "STATS 506 HW5"
author: "Minxuan Chen"
date: last-modified
format:
  pdf:
    toc: true
    number-sections: true
    colorlinks: true
  html:
    toc: true
    fig-align: "center"
    fig-width: 8
    fig-height: 6
    embed-resources: true
    format-links: false
    execute:
      warning: true
      freeze: auto
code-fold: show
code-overflow: scroll
code-line-numbers: true
---
Github repo: <https://github.com/PKUniiiiice/STATS_506>

## Problem 1 - Plotting









<!--
nnmaps_v1 <- nnmaps %>%
             group_by(month.year) %>%
             summarise( "mean_{{temp_cels}}" := mean({{temp_cels}}, na.rm=TRUE),
                       season = first(season)) %>%
             #we have detected that n_distinct(season)==1 in advance
             ungroup() %>%
             arrange(as.Date(paste("01", month.year, sep = "-"),
                             format = "%d-%b-%Y")) %>%
             print()

nnmaps_v3 <- nnmaps_v1 %>%
             separate(month.year, into = c("month", "year"), sep = "-") %>%
             mutate(year = as.numeric(year)) %>%
             print()
return (list(nnmaps_v1, nnmaps_v2, nnmaps_v3))

p1 <- ggplot(nnmaps_v1, aes(x = factor(month.year, levels=month.year),
                            y = mean_temp,
                            group = season, color=season)) +
      geom_line() +
      geom_point() +
      labs(title = "Mean Temperature Over Months",
           x = "Month",
           y = "Mean Temperature") +
      scale_color_manual(values = c("Winter" = "blue", "Spring" = "green",
                                    "Summer" = "orange", "Autumn" = "red"),
                         limits = c("Spring", "Summer", "Autumn", "Winter")) +
      scale_y_continuous(breaks = seq(-10, 35, by = 5), limits = c(-10, 30)) +
      theme_minimal() + 
      theme(plot.title = element_text(hjust = 0.5),
            axis.text.x = element_text(angle = 90, hjust = 1))
show(p1)

p3 <- ggplot(nnmaps_v3, aes(x = factor(month, levels = month.abb), y = mean_temp,
                      group = interaction(year, season), color=season,
                      linetype=as.factor(year))) +
  geom_line() +
  geom_point() +
  labs(title = "Mean Temperature Over Months",
       x = "Month",
       y = "Mean Temperature") +
  scale_color_manual(values = c("Winter" = "blue", "Spring" = "green",
                                "Summer" = "orange", "Autumn" = "red"),
                     limits = c("Spring", "Summer", "Autumn", "Winter")) +
  scale_linetype_manual(name = "Year",
                        values=c("solid", "dashed", "dotted", "dotdash")) + 
  scale_y_continuous(breaks = seq(-10, 35, by = 5), limits = c(-10, 30)) +
  theme_minimal() + 
  theme(plot.title = element_text(hjust = 0.5),)

show(p3)

-->

```{r, message=FALSE}
library(tidyverse)
library(ggplot2)
# read data
nnmaps <- read.csv("./chicago-nmmaps.csv")
# get celsius temperature
nnmaps$temp_cels <- (nnmaps$temp-32)*(5/9)

# Convert 'month' column to a factor with ordered levels
#create year-month column
nnmaps$month.year <- paste(nnmaps$month, nnmaps$year, sep='-')

# define a function, easier for part b       

##' @title Function to get data for plotting
##' @param temp_cels, name of the column to be averaged
process.data <- function(temp_cels){
nnmaps_v1 <- nnmaps %>%
             group_by(month) %>%
             summarise("mean_{{temp_cels}}" := mean({{temp_cels}}, na.rm=TRUE),
                       season=first(season)) %>%
             ungroup() %>%
             arrange(as.Date(paste("01", month, "2000", sep = "-"),
                             format = "%d-%b-%Y"))

return(nnmaps_v1)
}

nnmaps_v1 <- process.data(temp_cels=temp_cels)

p1 <- ggplot(nnmaps_v1, aes(x = factor(month, levels=month),
                            y = mean_temp_cels,
                            group = season, color=season)) +
      geom_line() +
      geom_point() +
      labs(title = "Mean Temperature Over Months",
           x = "Month",
           y = "Mean Temperature") +
      scale_color_manual(values = c("Winter" = "blue", "Spring" = "green",
                                    "Summer" = "orange", "Autumn" = "red"),
                         limits = c("Spring", "Summer", "Autumn", "Winter")) +
      scale_y_continuous(breaks = seq(-10, 35, by = 5), limits = c(-10, 30)) +
      theme_minimal() + 
      theme(plot.title = element_text(hjust = 0.5))
show(p1)
```
### (b)
```{r}
# use nnmaps_v2
temp <- process.data(temp_cels)
o3 <- process.data(o3)
pm10 <- process.data(pm10)
dewpoint <- process.data(dewpoint)

combined <- temp %>%
              left_join(o3, by=c('month', 'season')) %>% 
              left_join(pm10, by=c('month', 'season')) %>%
              left_join(dewpoint, by=c('month', 'season')) 

pb <- ggplot(combined, aes(x = factor(month, levels=month), group = season)) +
      geom_line(aes(y = mean_temp_cels, color = season, linetype = "Mean Temp")) +
      geom_point(aes(y = mean_temp_cels, color = season)) +  
      geom_line(aes(y = mean_o3, color = season, linetype = "Mean O3")) +
      geom_point(aes(y = mean_o3, color = season)) +  
      geom_line(aes(y = mean_pm10, color = season, linetype = "Mean PM10")) +
      geom_point(aes(y = mean_pm10, color = season)) + 
      geom_line(aes(y = mean_dewpoint, color = season, linetype = "Mean Dewpoint")) +
      geom_point(aes(y = mean_dewpoint, color = season)) + 
      scale_color_manual(values = c("Spring" = "green", "Summer" = "orange",
                                    "Autumn" = "red", "Winter" = "blue")) +
      scale_linetype_manual(values = c("Mean Temp" = "solid", "Mean O3" = "dashed",
                                       "Mean PM10" = "dotted", "Mean Dewpoint" = "dotdash")) +
      labs(title = "Monthly Trends",
           y = "Mean Value",
           x = "Month") +
      theme_minimal() + 
      scale_y_continuous(breaks = seq(-10,65, by = 5), limits = c(-10, 65)) +
      theme_minimal() + 
      theme(plot.title = element_text(hjust = 0.5),)
show(pb)


```

It seems that PM10 has the least seasonal trend. Because it appears the flattest over the year, i.e. remaining stable throughout the seasons.

## Problem 2 - OOP Programming
### (a)
```{r}
#| output: false
setClass("poly",
         representation(terms = "list"),
         prototype(terms = list())
)

##' @title Constructor
##' 
##' @param coef A coef vector
##' @param coef A power vector
##' @return A `poly` object
poly <- function(coef, exp) {
  if (length(coef) != length(exp)) {
    stop("Number of coefficients and exponents must be equal.")
  }
  terms <- list()
  for (i in 1:length(coef)){
    if (coef[i]==0) next
    terms[[as.character(exp[i])]] <- coef[i]
  }
  return(new("poly", terms = terms))
}

##' @title Validator
##' @param object A `ploy` object
##' @return bool, valid or not
setValidity("poly", function(object) {
  numc <- as.numeric(names(object@terms))
  intg <- as.integer(names(object@terms))
  valid <- all(numc>=0) && all(numc==intg) 
  # Check if exponents are positive integers
  if (!valid) {
    return("Exponents must be integers.")
  }
  return(TRUE)
})

##' @title Show Method
##' @param object A `ploy` object
setMethod("show", "poly", function(object) {
  cvt <- function(coef, i){
    ifelse((coef>0)&&(i>1), paste0('+',coef), coef)
  }
  terms <- object@terms
  exp.all <- as.integer(names(terms))
  coef.all <- unname(unlist(terms))
  id <- order(-exp.all)
  exp.all <- exp.all[id]
  coef.all <- coef.all[id]
  for (i in seq_along(terms)) {
    coef <- coef.all[i]
    exp <- exp.all[i]
    
    if (coef != 0) {
      if (exp==0) {
        cat(cvt(coef,i),
            ifelse(i==length(exp.all), "\n", ''),
            sep=' ')
      } 
      else if (exp==1) {
        cat(paste0(cvt(coef,i), "x"),
            ifelse(i== length(exp.all), "\n", ''),
            sep=' ')
      }
      else {
        cat(paste0(cvt(coef,i),"x^",exp),
            ifelse(i== length(terms$coef), "\n", ''),
            sep=' ')
      }
    }
  }
  return(invisible(object))
})

setGeneric("get.coef",
           function(object, key) {
             standardGeneric("get.coef")
           })
##' @title poly get coef
##'
##' @param object A `poly`
##' @param numeric key
##' @return A numeric
setMethod("get.coef", "poly", function(object, key){
  key <- as.character(key)
  if (key %in% names(object@terms)) {
    return(object@terms[[key]])
  } 
  else {
    return(0)
  }
})

##' @title poly addition
##'
##' @param e1 A `poly`
##' @param e2 A `poly`
##' @return A `poly`
setMethod("+", signature("poly", "poly"), function(e1, e2) {
  validObject(e1)
  validObject(e2)
  exp.max <- max(as.integer(c(names(e1@terms), names(e2@terms))))
  out <- list()
  for (i in 0:exp.max){
    coef.sum <- get.coef(e1, i) + get.coef(e2, i)
    if (all.equal(coef.sum, 0)==TRUE) next
    out[[as.character(i)]] <- coef.sum
  }
  out <- new("poly", terms = out)
  validObject(out)
  return(out)
})

# Negative method
setMethod("-", signature(e1 = "poly"), function(e1, e2) {
  for (i in names(e1@terms)){
    e1@terms[[i]] <- -e1@terms[[i]]
  }
  return(e1)
})

# Subtraction method
setMethod("-", signature("poly", "poly"), function(e1, e2) {
  e2 <- -e2
  return(e1+e2)
})
```

### (b)
```{r}
# Example usage:
p1 <- poly(coef=c(3, 2), exp=c(2, 0))
p2 <- poly(coef=c(7, 2, 1, 17), exp=c(3, 2, 1, 0))

p1
p2
p1 + p2
p1 - p2
```

## Problem 3 - data.table
### (a)
```{r, message=FALSE}
library(nycflights13)
data("airlines","airports", "flights", "planes", "weather")
library(data.table)

# Convert data frames to data tables
setDT(flights)
setDT(airports)

# Define a function to get mean delay median delay and n_count
delay_smy <- function(data, varb) {
  data[, .(Mean_delay = mean(get(varb), na.rm = TRUE),
           Median_delay = median(get(varb), na.rm = TRUE),
           n=.N)]
}

# Generate a table reporting mean and median departure delay per airport
smy1 <- na.omit(flights[airports,
                on = .(origin = faa), nomatch = 0L][,
                delay_smy(.SD, varb = "dep_delay"),
                by = name][
                order(-Mean_delay)][,
                .SD, .SDcols = -"n"])
print(smy1, n=Inf)
# Generate a second table reporting mean and median arrival delay per airport
smy2 <- na.omit(flights[airports,
                on = .(dest=faa), nomatch=0L][,
                delay_smy(.SD, varb="arr_delay"),
                by=name][n>=10][
                order(-Mean_delay)][,
                .SD, .SDcols = -"n"])
print(smy2, n = Inf)
```

### (b)
```{r}
#find the fastest speed model
# we should calculate the average speed manually, can't use the speed variable in table planes, since there are too many missing values in the column.
# we use air time and distance in table flights to calculate average speed
setDT(planes)
fastest <- na.omit(flights[planes, #filter missing at first
          on = .(tailnum=tailnum), nomatch=0L][,
                .(air_time, distance, model)])[,
          .(air_time = sum(air_time, na.rm=TRUE)/60, 
            #convert to hour
            distance = sum(distance, na.rm=TRUE),
            avg_speed = sum(distance, na.rm=TRUE) / sum(air_time, na.rm=TRUE) * 60,
            n = .N), by=model][
            order(-avg_speed)][,
            .(model, avg_speed, n)
            ]
print(fastest[1,])
```

